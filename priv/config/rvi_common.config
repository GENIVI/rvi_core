%% -*- erlang -*-

%% Copyright (C) 2014, Jaguar Land Rover
%%
%% This program is licensed under the terms and conditions of the
%% Mozilla Public License, version 2.0.  The full text of the
%% Mozilla Public License is at https://www.mozilla.org/MPL/2.0/
%%
%% Configuration include file for rvi config files
%%
Out = filename:absname(proplists:get_value(outdir, OPTIONS)).

%% Parameters for simpler modification
Env = fun(V, Def) ->
              case os:getenv(V) of
                  false -> Def;
                  Str when is_integer(Def) -> list_to_integer(Str);
                  Str when is_atom(Def) -> list_to_atom(Str);
                  Str -> Str
              end
      end.

LogDir = Env("RVI_LOGDIR", Out ++ "/log").
LagerRoot = LogDir ++ "/lager".
LagerDebugFmt = [time,"<",module,"/",line,">",message,"\n"].
LogLevel = Env("RVI_LOGLEVEL", info).
[
 %% All erlang apps needed to fire up a node. Do not touch.
 {apps,
  [kernel,
   stdlib,
   sasl,
   setup,
   syntax_tools,
   goldrush,
   lager,
   %% ale,
   crypto,
   public_key,
   gproc,
   base64url,
   uart,
   jsx,
   exo,
   gsms,
   compiler,
   ssl,
   asn1,
   %% RVI-specific apps.

   %% Do not touch unless you are replacing apps with your own
   %% version.  If you are replacing an app with a non-Erlang version,
   %% it still has to be loaded in order to resolve.
   %% If, for example, you want to deploy your own scheduler
   %% outside Erlang, replace
   %%
   %%     schedule,
   %% with
   %%     { schedule, load },
   %%
   rvi_core,
   rvi_common,
   service_discovery,
   service_edge,
   rvi_services,
   authorize,
   schedule,
   dlink,
   dlink_tcp,
   dlink_tls,
   dlink_sms,
   proto_bert,
   proto_json,
   proto_msgpack
   %% If adding apps, you can still include this config, and complement
   %% with {add_apps, [App]}, {remove_apps, [App]} and even {sort_app,A,Before}.
  ]},

 {env,
  [
   {setup,
    [
     {home, Out},
     {log_dir, LogDir}
    ]},
   {lager,
    [
     {log_root, LagerRoot},
     {crash_log, "crash.log"},
     {handlers,
      [{lager_console_backend,
        [LogLevel, {rvi_lager_formatter,
                    [{debug, LagerDebugFmt}]}
        ]},
       {lager_file_backend, [{file, "error.log"}, {level, error}]},
       {lager_file_backend, [{file, "console.log"}, {level, LogLevel},
			     {formatter, rvi_lager_formatter},
			     {formatter_config, [{debug, LagerDebugFmt}]}]}
      ]},
     {extra_sinks,
      [
       {rvi_log_log_lager_event,
	[{handlers,
	  [{lager_file_backend, [{file,"rvi_log.log"},{level,info},
				{formatter, lager_default_formatter},
				 {formatter_config,
				  [time, " ", message, "\n"]}
				]}
	  ]}
	]}
      ]}
    ]},
   %% {ale,
   %%  [{init_traces, [ {[{module,rvi_log},
   %% 		       {sink, rvi_log_log_lager_event}], info, LagerRoot ++ "/rvi_log.log"} ]}]
   %% },
   {rvi_core,
    [
     {'$setup_vars', [{"NODE_ID", {apply, rvi_common, default_node_id, []}}]},
     %%
     {device_key, "$PRIV_DIR/keys/device_key.pem"},
     {device_cert, "$PRIV_DIR/certificates/device_cert.crt"},
     {root_cert, "$PRIV_DIR/certificates/root_cert.crt"},
     {cred_dir, "$PRIV_DIR/credentials"},
     {node_id, {'$binary', "$NODE_ID"}}
    ]}
  ]}
].
